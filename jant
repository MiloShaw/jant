#!/bin/sh

#############################################################################
# Author : Milo Shaw  milo@deepsupport.org | milo@newlisp.cn |
# Update : 2018-01-20 12:26:08
#############################################################################

ANT=/usr/local/bin/ant
SED=/usr/bin/sed
DIRNAME=/usr/bin/dirname
BASENAME=/usr/bin/basename
MD=/bin/mkdir

BUILD_FILE="build.xml"
CODE_DIR="src"
LIBRARY_DIR="lib"
TEST_DIR="test"

#############################################################################
# PROJECT_BUILD_FILE                                                        #
#============================================================================
# <project name="PROJECTNAME" basedir="." default="main">

#    <property name="src.dir" value="src"/>
#    <property name="build.dir" value="build"/>
#    <property name="test.dir" value="test"/>
#    <property name="report.dir" value="report"/>
#    <property name="classes.dir" value="${build.dir}/classes"/>
#    <property name="jar.dir" value="${build.dir}/jar"/>
#    <property name="main-class" value="ORGNIZATION.PROJECTNAME"/>

#    <property name="lib.dir" value="lib"/>
#    <path id="classpath">
#        <fileset dir="${lib.dir}" includes="**/*.jar"/>
#    </path>

#    <target name="clean">
#        <delete dir="${build.dir}"/>
#        <delete dir="${report.dir}"/>
#    </target>
#    <target name="compile">
#        <mkdir dir="${classes.dir}"/>
#        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" includeantruntime="on"/>
#    </target>
#    <target name="jar">
#        <mkdir dir="${jar.dir}"/>
#        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
#            <manifest>
#                <attribute name="Main-Class" value="${main-class}"/>
#            </manifest>
#        </jar>
#    </target>
#    <path id="application" location="${jar.dir}/${ant.project.name}.jar"/>
#    <target name="run" depends="jar">
#        <java classname="${main-class}" fork="true">
#            <classpath>
#                <path refid="classpath"/>
#                <path refid="application"/>
#            </classpath>
#        </java>
#    </target>
#    <target name="junit" depends="jar">
#        <mkdir dir="${report.dir}"/>           
#        <junit printsummary="yes" haltonfailure="no">
#            <classpath>
#                <path refid="classpath"/>
#                <path refid="application"/>
#            </classpath>
#            <formatter type="xml"/>
#            <formatter type="plain"/>
#            <batchtest fork="yes" todir="${report.dir}">
#                <fileset dir="${test.dir}" includes="**/*Test*.java"/>
#            </batchtest>
#        </junit>
#    </target>

#    <target name="clean-build" depends="clean,jar"/>
#    <target name="main" depends="clean,run"/>

# </project>
#############################################################################

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# JAVA_HERE                                                                 #
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#public class PROJECTNAME {
#
#    public static void main(String[] args) {
#        System.out.println("Hi, jant!");
#    }
#}
#============================================================================

find_compile_and_run(){

    if [ -x ${ANT} ];then
        until [ $(pwd) = "/" ];
        do
            if [ -s $(pwd)/$BUILD_FILE ];then
                ${ANT} compile -buildfile $(pwd)/$BUILD_FILE
                ${ANT} run -buildfile $(pwd)/$BUILD_FILE
                exit 0;
            else
                cd ..
            fi
        done
    else
        echo "You need install apache ant first !"
    fi
}

filter_param(){

    if [ -n "$1" ]; then
        echo ${1} | ${SED} -E -e "s/([\[\=\"\'\(\{\:]+)//;s/([]\;\}\)\,\"\']+)//;s/-/_/g";
    fi
}

generate_build_file(){

    if [ -n "$1" ] && [ -n "$2" ] && [ ! -f $1/$BUILD_FILE ] && [ -w $(${DIRNAME} ${1}) ]; then
        ${SED} -n "/^#.PROJECT\_BUILD\_FILE.*\#$/,/^#.*\#$/p" < $0 | ${SED} "/^#.PROJECT\_BUILD\_FILE.*\#$/,/^#.*\=$/d;/^#.*\#$/d;s/^#.//g;s/PROJECTNAME/$(${BASENAME} ${1})/;s/ORGNIZATION/${2}/;" > $1/$BUILD_FILE
    fi
}

generate_main_class(){

    if [ -n "$1" ] && [ -f $1 ] && [ -w $(${DIRNAME} ${1}) ]; then
        project_name=$(echo $(${BASENAME} $1) | cut -d "." -f 1);
        ${SED} -n "/^#.JAVA\_HERE.*\#$/,/^#.*\=$/p" < $0 | ${SED} "/^#.JAVA\_HERE.*\#$/,/^#.*\+$/d;/^#.*\=$/d;s/^#//g;s/PROJECTNAME/$project_name/;" >> $1
    fi
}

create_java_project(){

    if [ -n "$1" ] && [ -n "$2" ];then
        local pname=$(filter_param $1);
        local org=$(filter_param $2);
        if [ -n "$pname" ] && [ -n "$org" ] && [ ! -d $pname ] && [ -w $(${DIRNAME} ${pname}) ];then
            # create project directory 
            ${MD} $pname

            # create src lib sub-directories
            ${MD} $pname/${LIBRARY_DIR}
    
            subdirs=$(echo ${org} | ${SED} -e "s/\./\//g");
            ${MD} -p $pname/${CODE_DIR}/${subdirs}
            ${MD} -p $pname/${TEST_DIR}/${subdirs}
    
            echo "package ${org};" > $pname/${CODE_DIR}/${subdirs}/$(${BASENAME} ${pname}).java
            echo "package ${org};" > $pname/${TEST_DIR}/${subdirs}/$(${BASENAME} ${pname})Test.java

            generate_main_class $pname/${CODE_DIR}/$subdirs/$(${BASENAME} ${pname}).java
            generate_main_class $pname/${TEST_DIR}/$subdirs/$(${BASENAME} ${pname})Test.java

            # generate project build configure file: $BUILD_FILE
            generate_build_file $pname $org

            if [ -x /usr/local/bin/tree ] || [ -x /usr/bin/tree ];then
                tree $pname
            fi
        fi
    fi
}

usge_help(){
    echo "======================================================================="
    echo "=         Autonamic Create Java Project and Compile and Run           ="
    echo "======================================================================="
    echo "=  create project : jant -n project_name  your_orgnization            ="
    echo "=  compile and run: jant                                              ="
    echo "=  show help info : jant -h                                           ="
    echo "======================================================================="
    exit 1
}

environment_check(){

    if [ -f $0 ] && [ $(${DIRNAME} $0) = "." ];then
        local position=$(pwd)/$(${BASENAME} $0)
        chmod 755 $position;
        if [ $(id -u) -ne 0 ];then
            sudo mv $position /usr/local/bin/
        else
            mv $position /usr/local/bin/
        fi 
        usge_help
    fi 
}

# self checked and launch...
environment_check
if [ $# -le 0 ];then
    find_compile_and_run
else
    if [ "$1" = "-h" ];then
        usge_help
    else
        if [ "$1" = "-n" ] && [ -n "$2" ] && [ -n "$3" ];then
            create_java_project $2 $3
        fi
    fi
fi
